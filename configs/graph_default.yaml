defaults:
  - override hydra/job_logging: colorlog
  - override hydra/hydra_logging: colorlog
  - _self_

machine:
  seed: 42
  num_gpus: 1
  num_machines: 1
  machine_rank: 0
  dist_url: auto

logging:
  steps_per_log: 10
  max_buffer_size: 20
  # writer logs losses and images per iteration
  writer:
    TensorboardWriter:
      log_dir: './'
    LocalWriter:
      log_dir: './'
      stats_to_track:
        [ITER_LOAD_TIME, ITER_TRAIN_TIME, RAYS_PER_SEC, CURR_TEST_PSNR]
      max_log_size: 10 # if 0, logs everything with no erasing
  # profiler logs run times of functions and prints at end of training
  enable_profiler: True

trainer:
  model_dir: './checkpoints'
  steps_per_save: 1000
  steps_per_test: 500
  max_num_iterations: 1000000
  mixed_precision: False
  resume_train:
    load_dir: # pretrained model directory
    load_step: # pretrained model's step number

experiment_name: blender_lego
method_name: vanilla_nerf

# hydra settings
hydra:
  mode: RunMode.RUN
  run:
    dir: outputs/${experiment_name}/${method_name}/${now:%Y-%m-%d_%H%M%S}
  job:
    chdir: True

pipeline:
  _target_: nerfactory.pipelines.base.Pipeline
  dataloader:
    _target_: nerfactory.dataloaders.base.VanillaDataloader
    image_dataset_type: rgb
    train_dataset:
      _target_: nerfactory.dataloaders.datasets.Dataset
    train_num_rays_per_batch: 1024
    train_num_images_to_sample_from: -1
    eval_image_indices: [0]
    eval_num_rays_per_chunk: 4096
  model:
    _target_: nerfactory.models.vanilla_nerf.NeRFModel
    enable_collider: True
    collider_config:
      _target_: nerfactory.models.modules.scene_colliders.NearFarCollider
      near_plane: 2.0
      far_plane: 6.0
    num_coarse_samples: 64
    num_importance_samples: 128
    loss_coefficients:
      rgb_loss_coarse: 1.0
      rgb_loss_fine: 1.0
    enable_density_field: false
    density_field_config:
      # Please see the docstr for DensityGrid on how to set those arguments.
      _target_: nerfactory.fields.density_fields.density_grid.DensityGrid
      center: 0.0 # simply set it as the center of the scene bbox
      base_scale: 3.0 # simply set it as the scale of the scene bbox
      num_cascades: 1 # if using more than 1 cascade, the `base_scale` can be smaller than scene scale.
      resolution: 128
      update_every_num_iters: 16

optimizers:
  fields:
    optimizer:
      _target_: torch.optim.RAdam
      lr: 0.0005
    scheduler:
      _target_: nerfactory.optimizers.optimizers.ExponentialDecaySchedule
      lr_final: 0.000005
      max_steps: 1000000

viewer:
  enable: False
  zmq_url: tcp://127.0.0.1:6000
  min_render_image_height: 64
  max_render_image_height: 1024
  num_rays_per_chunk: 4096
